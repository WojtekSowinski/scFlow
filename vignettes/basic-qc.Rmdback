---
title: "scFlow: Guided Tutorial for Sample QC"
output: 
  prettydoc::html_pretty:
    theme: cayman
    highlight: github
vignette: >
  %\VignetteIndexEntry{Guided tutorial for sample quality control}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, echo = FALSE}
library(httr)
library(scFlow)
knitr::opts_chunk$set(comment = "#>", collapse = TRUE)
```

## Overview
The basic _scflow_ workflow for sample QC begins with the import of the feature-barcode sparse matrix with `read_feature_barcode_matrix`.  The metadata for the sample is then imported from a sample sheet with `read_metadata`.  A SingleCellExperiment object is created from the matrix and the metadata using `generate_sce` which is then annotated with both gene and cell-level data using `annotate_sce`.  We then filter the SingleCellExperiment to select only cells and genes meeting our QC criteria using `filter_sce`.  We can then optionally find singlets in our filtered SingleCellExperiment using `find_singlets` before filtering them out again with `filter_sce`.  A complete QC report can then be generated using `report_qc_sce` before saving the filtered and quality-controlled SingleCellExperiment with `write_sce`.  

## Step one - import the matrix and metadata

```{r, results = 'asis', echo = TRUE, include = TRUE}
mat <- read_sparse_matrix("~/Documents/ms-sc/data/raw/testfbmatrix/outs/raw_feature_bc_matrix")
```

Next we retrieve the metadata by pointing to a Sample Sheet and specifying a unique identifier (`unique_id`) in a specific column (`id_colname`): -

```{r, results = 'asis', echo = TRUE, include = TRUE}
metadata <- read_metadata(
  unique_key = "sisos",
  key_colname = "manifest",
  samplesheet_path = "~/Documents/nf-sc/refs/SampleSheet.tsv"
)
```

For downstream analyses it's important that the variable classes are correctly specified.  Carefully inspect the metadata classes in brackets. In the above example we see that the *batch*, *capdate*, *prepdate*, *seqdate*, and *aplevel* were imported as _integer_ rather than _factor_ variables.  Let's correct this by reloading the metadata, this time specifying the correct variable classes for these variables: -

```{r, results = 'asis', echo = TRUE, include = TRUE}
var_classes <- c(
  batch = "factor",
  capdate = "factor",
  prepdate = "factor",
  seqdate = "factor",
  aplevel = "factor"
)

metadata <- read_metadata(
  unique_key = "sisos",
  key_colname = "manifest",
  samplesheet_path = "~/Documents/nf-sc/refs/SampleSheet.tsv",
  col_classes = var_classes
)
```

With the metadata imported with the correct variable classes, and the previously loaded sparse matrix, we can generate our SingleCellExperiment object: -

```{r, results = 'asis', echo = TRUE, include = TRUE}
sce <- generate_sce(mat, metadata)
```

The SingleCellExperiment object was succesfully created and we can now proceed with annotation.

```{r, results = 'asis', echo = TRUE, include = TRUE}
sce
```

## Step two -- Annotate the SingleCellExperiment

In *scFlow* we specify all of our QC preferences and cutoffs with the `annotate_sce` command.  This will also produce plots in the sce@metadata slot allowing rapid revision and optimization of QC parameters.  Let's start with the default parameters by simply providing the SingleCellExperiment object to the `annotate_sce` function: -

```{r, results = 'asis', echo = TRUE, include = TRUE}
sce <- annotate_sce(
  sce,
  ensembl_mapping_file = "~/Documents/ms-sc/src/ensembl-ids/ensembl_mappings.tsv"
)
```

A list of QC plots are available to browse in the `sce@metadata$qc_plots`, e.g.

```{r, results = 'asis', fig.align="center", fig.width=6, fig.height=4, include = TRUE}
sce@metadata$qc_plots$number_genes_vs_count_depth
```

After running `annotate_sce` we may examine the plots and assess whether the applied thresholds are sensible for the sample.  The effects of different parameters can be explored by iterating through the above `generate_sce` and `annotate_sce` functions until satisfied with the settings.

The next step is to filter the SingleCellExperiment with `filter_sce`: -

```{r, results = 'asis', include = TRUE}
sce <- filter_sce(sce)
```

## Finding singlets and discarding multiplets

At this stage we may wish to identify singlets in the SingleCellExperiment and discard any multiplets.  In *scFlow* we simply run `find_singlets` and specify our preferred multiplet identification algorithm.  Here we will use `doubletfinder`: -

```{r, results = 'asis', eval = FALSE, include = TRUE}
knitr::opts_chunk$set(echo = FALSE)

sce <- find_singlets(sce, "doubletfinder", pK = 0.005, vars_to_regress_out = c("nCount_RNA", "pc_mito"))
```

Now we can filter out these multiplets with `filter_sce`: -

```{r, results = 'asis', eval = FALSE, include = TRUE}
sce <- filter_sce(sce)
```

Finally we produce a report with `report_qc_sce` (this takes a few minutes): -

```{r, results = 'asis', eval = FALSE, include = TRUE}
report_qc_sce(sce)
```

And save our SingleCellExperiment: -
```{r, results = 'asis', eval = FALSE, include = TRUE}
write_sce(sce, "../test/testsce")
```
